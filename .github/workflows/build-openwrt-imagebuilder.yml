name: openwrt-imagebuilder

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'OpenWrt version'
        required: true

env:
  TZ: Asia/Shangha
  VERSION: ${{ github.event.inputs.version }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Initialization
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set -Eeuo pipefail
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential libncurses-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 mkisofs qemu-utils zstd
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Prepare Build Environment
      run: |
        set -Eeuo pipefail
        # 下载 VMware OVF 工具
        wget -q https://github.com/skylens/ovftool-binaries/raw/main/archive/VMware-ovftool-4.4.3-18663434-lin.x86_64.zip
        unzip -q VMware-ovftool-4.4.3-18663434-lin.x86_64.zip
        sudo cp -r ovftool /usr/local/
        sudo ln -sf /usr/local/ovftool/ovftool /usr/local/bin/
        ovftool --version

        # 下载并解压 ImmortalWrt 镜像构建器
        wget -q https://downloads.openwrt.org/releases/$VERSION/targets/x86/64/openwrt-imagebuilder-$VERSION-x86-64.Linux-x86_64.tar.zst
        tar -I zstd -xf openwrt-imagebuilder-*-x86-64.Linux-x86_64.tar.zst
        IMAGEBUILDER_DIR="$(find . -maxdepth 1 -type d -name 'openwrt-imagebuilder-*x86-64.Linux-x86_64' | head -n1)"
        echo "IMAGEBUILDER_DIR=${IMAGEBUILDER_DIR}" >> "$GITHUB_ENV"
        mkdir -p "$IMAGEBUILDER_DIR/output"

    - name: Custom Configuration
      run: |
        set -Eeuo pipefail
        cd "$IMAGEBUILDER_DIR"
        # 更新配置文件
        sed -i \
          -e 's/CONFIG_GRUB_TIMEOUT="3"/CONFIG_GRUB_TIMEOUT="0"/' \
          -e 's/CONFIG_GRUB_EFI_IMAGES=y/CONFIG_GRUB_EFI_IMAGES=n/' \
          -e 's/CONFIG_ISO_IMAGES=y/CONFIG_ISO_IMAGES=n/' \
          -e 's/CONFIG_QCOW2_IMAGES=y/CONFIG_QCOW2_IMAGES=n/' \
          -e 's/CONFIG_VDI_IMAGES=y/CONFIG_VDI_IMAGES=n/' \
          -e 's/CONFIG_VMDK_IMAGES=y/CONFIG_VMDK_IMAGES=n/' \
          -e 's/CONFIG_VHDX_IMAGES=y/CONFIG_VHDX_IMAGES=n/' \
          -e 's/CONFIG_TARGET_ROOTFS_TARGZ=y/CONFIG_TARGET_ROOTFS_TARGZ=n/' \
          -e 's/CONFIG_TARGET_IMAGES_GZIP=y/CONFIG_TARGET_IMAGES_GZIP=n/' \
          -e 's/CONFIG_TARGET_KERNEL_PARTSIZE=.*/CONFIG_TARGET_KERNEL_PARTSIZE=256/' \
          -e 's/CONFIG_TARGET_ROOTFS_PARTSIZE=.*/CONFIG_TARGET_ROOTFS_PARTSIZE=768/' .config

        # 自定义文件夹
        mkdir -p files/etc/uci-defaults
        cp ../99-custom files/etc/uci-defaults/

        mkdir -p output/esxi/{ext4,squashfs}
        cp ../openwrt.ovf output/esxi/ext4/
        cp ../openwrt.ovf output/esxi/squashfs/

    - name: Build Image
      run: |
        set -Eeuo pipefail
        cd "$IMAGEBUILDER_DIR"
        make image PACKAGES="-bnx2-firmware -dnsmasq dnsmasq-full luci luci-i18n-base-zh-cn kmod-e100 kmod-e1000 kmod-vmxnet3 kmod-wireguard open-vm-tools lrzsz tar unzip wget-ssl curl" FILES="files"

    - name: Generate OVA Files
      run: |
        set -Eeuo pipefail
        cd "$IMAGEBUILDER_DIR"
        TGT="bin/targets/x86/64"
        # 解压镜像
        gunzip -f "$TGT/openwrt-$VERSION-x86-64-generic-ext4-combined.img.gz"

        # 复制生成的镜像
        cp "$TGT"/*combined.img output/

        ls -al output

        # 转换为 VMDK 格式
        qemu-img convert -f raw -O vmdk \
          "output/openwrt-$VERSION-x86-64-generic-ext4-combined.img" \
          "output/openwrt-$VERSION-x86-64-generic-ext4-combined.vmdk"
        qemu-img convert -f vmdk -O vmdk -o adapter_type=lsilogic,subformat=streamOptimized,compat6 \
          "output/openwrt-$VERSION-x86-64-generic-ext4-combined.vmdk" \
          "output/esxi/ext4/openwrt-disk1.vmdk"

        qemu-img convert -f raw -O vmdk \
          "output/openwrt-$VERSION-x86-64-generic-squashfs-combined.img" \
          "output/openwrt-$VERSION-x86-64-generic-squashfs-combined.vmdk"
        qemu-img convert -f vmdk -O vmdk -o adapter_type=lsilogic,subformat=streamOptimized,compat6 \
          "output/openwrt-$VERSION-x86-64-generic-squashfs-combined.vmdk" \
          "output/esxi/squashfs/openwrt-disk1.vmdk"

        # 输出文件大小
        du --bytes output/*.vmdk
        du --bytes output/esxi/*/*.vmdk

        # 转换为 OVA 格式
        (cd output/esxi/ext4 && ovftool openwrt.ovf "openwrt-$VERSION-x86-64-ext4-combined.ova")
        (cd output/esxi/squashfs && ovftool openwrt.ovf "openwrt-$VERSION-x86-64-squashfs-combined.ova")

        # 复制 OVA 文件到输出目录
        cp output/esxi/*/*.ova output/
        rm -rf output/esxi

    - name: Upload Artifact
      uses: actions/upload-artifact@v4.6.1
      with:
        name: openwrt-firmware
        path: ./openwrt-imagebuilder-*/output
